class Node:
    """
    The class will present a unit node of the stack.
    """

    # The initializer of the class. It's going to take the value of the node which will be stored in the stack.
    def __init__(self, value):
        self.value = value
        # This stores the reference to the next node. It's going to be None if the node is the last one.
        self.next = None


# This class is auto generated by the CodePilot IDE.
class stackAuto:
    """
    The class will use the node object to create a stack.
    """

    # The initializer of the class. It's going to take the value of the node which will be stored in the stack.
    def __init__(self):
        self.head = None
        self.size = 0

    # This method will add a new node to the stack.
    def push(self, value):
        new_node = Node(value)
        new_node.next = self.head
        self.head = new_node
        self.size += 1

    # This method will remove the last node from the stack.
    def pop(self):
        if self.size == 0:
            return None
        else:
            temp = self.head
            self.head = self.head.next
            self.size -= 1
            return temp.value

    # This method will return the last node from the stack.
    def peek(self):
        if self.size == 0:
            return None
        else:
            return self.head.value

    # This method will return the size of the stack.
    def get_size(self):
        return self.size

    # This method will return True if the stack is empty and False if it's not.
    def is_empty(self):
        if self.size == 0:
            return True
        else:
            return False

    # This method will return the stack as a string.
    def __str__(self):
        if self.size == 0:
            return "The stack is empty."
        else:
            temp = self.head
            string = ""
            while temp != None:
                string += str(temp.value) + " "
                temp = temp.next
            return string

    # This method will return the stack as a list.
    def __repr__(self):
        if self.size == 0:
            return "The stack is empty."
        else:
            temp = self.head
            list = []
            while temp != None:
                list.append(temp.value)
                temp = temp.next
            return list

    # This method will return True if


class Stack:
    def __init__(self, value=None):
        self.top = None
        if (value):
            self.push(value)

    def push(self, value):
        new_node = Node(value)
        if(self.top == None):
            self.top = new_node
        else:
            new_node.next = self.top
            self.top = new_node

    def pop(self):
        if(self.top == None):
            return 'Empty Stack'
        else:
            temp = self.top
            self.top = temp.next
            temp.next = None
            value = temp.value
            del temp
            return f'Popped {value}'

    def traverse(self):
        if(self.top == None):
            print('Empty Stack')
        else:
            temp = self.top
            while temp != None:
                print(f'{temp.value}->', end = '')
                temp = temp.next
            print()


def main():
    stack = Stack()
    stack.push(9)
    stack.push(8)
    stack.push(10)
    stack.traverse()
    print(stack.pop())
    print(stack.pop())
    print(stack.pop())
    print(stack.pop())
    stack.push(8)
    stack.traverse()


if __name__ == "__main__":
    main()
